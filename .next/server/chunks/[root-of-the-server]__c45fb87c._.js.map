{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///D:/next-project067/product-app-067/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: ['query'], // ช่วย debug ดูคําสั่งที่ยิงไป DB ระหว่างพัฒนา\r\n  })\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AACF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///D:/next-project067/product-app-067/app/api/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport bcrypt from 'bcryptjs'\r\nimport {prisma} from '@/lib/prisma'\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { username, password, role } = await req.json()\r\n\r\n    if (!username?.trim() || !password?.trim()) {\r\n      return NextResponse.json({ error: 'Username/Password ห้ามว่าง' }, { status: 400 })\r\n    }\r\n\r\n    // ตรวจว่ามี username นี้แล้วหรือยัง\r\n    const exists = await prisma.user.findUnique({ where: { username } })\r\n    if (exists) {\r\n      return NextResponse.json({ error: 'Username นี้ถูกใช้แล้ว' }, { status: 409 })\r\n    }\r\n\r\n    const hashed = await bcrypt.hash(password, 10)\r\n\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        username,\r\n        password: hashed,\r\n        // ป้องกัน: ถ้าไม่ใช่ admin ให้บังคับเป็น user\r\n        role: role === 'admin' ? 'admin' : 'user',\r\n      },\r\n      select: { id: true, username: true, role: true, createdAt: true },\r\n    })\r\n\r\n    return NextResponse.json(user, { status: 201 })\r\n  } catch (err) {\r\n    console.error(err)\r\n    return NextResponse.json({ error: 'Server error' }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnD,IAAI,CAAC,UAAU,UAAU,CAAC,UAAU,QAAQ;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,oCAAoC;QACpC,MAAM,SAAS,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAS;QAAE;QAClE,IAAI,QAAQ;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,MAAM,SAAS,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAE3C,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA,UAAU;gBACV,8CAA8C;gBAC9C,MAAM,SAAS,UAAU,UAAU;YACrC;YACA,QAAQ;gBAAE,IAAI;gBAAM,UAAU;gBAAM,MAAM;gBAAM,WAAW;YAAK;QAClE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC/C,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}}]
}